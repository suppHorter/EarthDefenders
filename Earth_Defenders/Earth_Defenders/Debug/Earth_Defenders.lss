
Earth_Defenders.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a6  00800100  00000a0c  00000aa0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  008001a6  008001a6  00000b46  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b46  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00000bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002aab  00000000  00000000  00000dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001118  00000000  00000000  0000387b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001205  00000000  00000000  00004993  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000055c  00000000  00000000  00005b98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008d6  00000000  00000000  000060f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001302  00000000  00000000  000069ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00007ccc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e0       	ldi	r30, 0x0C	; 12
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 3a       	cpi	r26, 0xA6	; 166
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 ea       	ldi	r26, 0xA6	; 166
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 3a       	cpi	r26, 0xAC	; 172
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 71 04 	call	0x8e2	; 0x8e2 <main>
  9e:	0c 94 04 05 	jmp	0xa08	; 0xa08 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <resetDisplay>:
{
	spiStartWrite();
	setAddrWindow(x0, y0, w, h); // set active region
	write565(color, w * h); // set color data for all pixels
	spiEndWrite();
}
  a6:	5f 9a       	sbi	0x0b, 7	; 11
  a8:	2f ef       	ldi	r18, 0xFF	; 255
  aa:	83 ec       	ldi	r24, 0xC3	; 195
  ac:	99 e0       	ldi	r25, 0x09	; 9
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <resetDisplay+0x8>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <resetDisplay+0x12>
  b8:	00 00       	nop
  ba:	5f 98       	cbi	0x0b, 7	; 11
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	83 ec       	ldi	r24, 0xC3	; 195
  c0:	99 e0       	ldi	r25, 0x09	; 9
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <resetDisplay+0x1c>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <resetDisplay+0x26>
  cc:	00 00       	nop
  ce:	5f 9a       	sbi	0x0b, 7	; 11
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	83 ec       	ldi	r24, 0xC3	; 195
  d4:	99 e0       	ldi	r25, 0x09	; 9
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <resetDisplay+0x30>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <resetDisplay+0x3a>
  e0:	00 00       	nop
  e2:	08 95       	ret

000000e4 <initDisplay>:
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <resetDisplay>
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	8a b9       	out	0x0a, r24	; 10
  ec:	5f 9a       	sbi	0x0b, 7	; 11
  ee:	21 9a       	sbi	0x04, 1	; 4
  f0:	08 95       	ret

000000f2 <controller_begin>:
  f2:	0e 94 c4 02 	call	0x588	; 0x588 <spiInitMaster>
  f6:	0e 94 72 00 	call	0xe4	; 0xe4 <initDisplay>
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	0e 94 f6 02 	call	0x5ec	; 0x5ec <writeCmd>
 100:	2f ef       	ldi	r18, 0xFF	; 255
 102:	83 ed       	ldi	r24, 0xD3	; 211
 104:	90 e3       	ldi	r25, 0x30	; 48
 106:	21 50       	subi	r18, 0x01	; 1
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <controller_begin+0x14>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <controller_begin+0x1e>
 110:	00 00       	nop
 112:	8b ec       	ldi	r24, 0xCB	; 203
 114:	0e 94 f6 02 	call	0x5ec	; 0x5ec <writeCmd>
 118:	89 e3       	ldi	r24, 0x39	; 57
 11a:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 11e:	8c e2       	ldi	r24, 0x2C	; 44
 120:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 12a:	84 e3       	ldi	r24, 0x34	; 52
 12c:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 136:	8f ec       	ldi	r24, 0xCF	; 207
 138:	0e 94 f6 02 	call	0x5ec	; 0x5ec <writeCmd>
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 142:	81 ec       	ldi	r24, 0xC1	; 193
 144:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 148:	80 e3       	ldi	r24, 0x30	; 48
 14a:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 14e:	88 ee       	ldi	r24, 0xE8	; 232
 150:	0e 94 f6 02 	call	0x5ec	; 0x5ec <writeCmd>
 154:	85 e8       	ldi	r24, 0x85	; 133
 156:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 160:	88 e7       	ldi	r24, 0x78	; 120
 162:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 166:	8a ee       	ldi	r24, 0xEA	; 234
 168:	0e 94 f6 02 	call	0x5ec	; 0x5ec <writeCmd>
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 178:	8d ee       	ldi	r24, 0xED	; 237
 17a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <writeCmd>
 17e:	84 e6       	ldi	r24, 0x64	; 100
 180:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 184:	83 e0       	ldi	r24, 0x03	; 3
 186:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 18a:	82 e1       	ldi	r24, 0x12	; 18
 18c:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 190:	81 e8       	ldi	r24, 0x81	; 129
 192:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 196:	87 ef       	ldi	r24, 0xF7	; 247
 198:	0e 94 f6 02 	call	0x5ec	; 0x5ec <writeCmd>
 19c:	80 e2       	ldi	r24, 0x20	; 32
 19e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 1a2:	80 ec       	ldi	r24, 0xC0	; 192
 1a4:	0e 94 f6 02 	call	0x5ec	; 0x5ec <writeCmd>
 1a8:	83 e2       	ldi	r24, 0x23	; 35
 1aa:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 1ae:	80 ec       	ldi	r24, 0xC0	; 192
 1b0:	0e 94 f6 02 	call	0x5ec	; 0x5ec <writeCmd>
 1b4:	80 e1       	ldi	r24, 0x10	; 16
 1b6:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 1ba:	85 ec       	ldi	r24, 0xC5	; 197
 1bc:	0e 94 f6 02 	call	0x5ec	; 0x5ec <writeCmd>
 1c0:	8e e3       	ldi	r24, 0x3E	; 62
 1c2:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 1c6:	88 e2       	ldi	r24, 0x28	; 40
 1c8:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 1cc:	87 ec       	ldi	r24, 0xC7	; 199
 1ce:	0e 94 f6 02 	call	0x5ec	; 0x5ec <writeCmd>
 1d2:	86 e8       	ldi	r24, 0x86	; 134
 1d4:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 1d8:	86 e3       	ldi	r24, 0x36	; 54
 1da:	0e 94 f6 02 	call	0x5ec	; 0x5ec <writeCmd>
 1de:	88 e4       	ldi	r24, 0x48	; 72
 1e0:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 1e4:	87 e3       	ldi	r24, 0x37	; 55
 1e6:	0e 94 f6 02 	call	0x5ec	; 0x5ec <writeCmd>
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 1f0:	8a e3       	ldi	r24, 0x3A	; 58
 1f2:	0e 94 f6 02 	call	0x5ec	; 0x5ec <writeCmd>
 1f6:	85 e5       	ldi	r24, 0x55	; 85
 1f8:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 1fc:	81 eb       	ldi	r24, 0xB1	; 177
 1fe:	0e 94 f6 02 	call	0x5ec	; 0x5ec <writeCmd>
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 208:	88 e1       	ldi	r24, 0x18	; 24
 20a:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 20e:	86 eb       	ldi	r24, 0xB6	; 182
 210:	0e 94 f6 02 	call	0x5ec	; 0x5ec <writeCmd>
 214:	88 e0       	ldi	r24, 0x08	; 8
 216:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 21a:	82 e8       	ldi	r24, 0x82	; 130
 21c:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 220:	87 e2       	ldi	r24, 0x27	; 39
 222:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 226:	82 ef       	ldi	r24, 0xF2	; 242
 228:	0e 94 f6 02 	call	0x5ec	; 0x5ec <writeCmd>
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 232:	86 e2       	ldi	r24, 0x26	; 38
 234:	0e 94 f6 02 	call	0x5ec	; 0x5ec <writeCmd>
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 23e:	80 ee       	ldi	r24, 0xE0	; 224
 240:	0e 94 f6 02 	call	0x5ec	; 0x5ec <writeCmd>
 244:	8f e0       	ldi	r24, 0x0F	; 15
 246:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 24a:	81 e3       	ldi	r24, 0x31	; 49
 24c:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 250:	8b e2       	ldi	r24, 0x2B	; 43
 252:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 256:	8c e0       	ldi	r24, 0x0C	; 12
 258:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 25c:	8e e0       	ldi	r24, 0x0E	; 14
 25e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 262:	88 e0       	ldi	r24, 0x08	; 8
 264:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 268:	8e e4       	ldi	r24, 0x4E	; 78
 26a:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 26e:	81 ef       	ldi	r24, 0xF1	; 241
 270:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 274:	87 e3       	ldi	r24, 0x37	; 55
 276:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 27a:	87 e0       	ldi	r24, 0x07	; 7
 27c:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 280:	80 e1       	ldi	r24, 0x10	; 16
 282:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 286:	83 e0       	ldi	r24, 0x03	; 3
 288:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 28c:	8e e0       	ldi	r24, 0x0E	; 14
 28e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 292:	89 e0       	ldi	r24, 0x09	; 9
 294:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 29e:	81 ee       	ldi	r24, 0xE1	; 225
 2a0:	0e 94 f6 02 	call	0x5ec	; 0x5ec <writeCmd>
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 2aa:	8e e0       	ldi	r24, 0x0E	; 14
 2ac:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 2b0:	84 e1       	ldi	r24, 0x14	; 20
 2b2:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 2b6:	83 e0       	ldi	r24, 0x03	; 3
 2b8:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 2bc:	81 e1       	ldi	r24, 0x11	; 17
 2be:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 2c2:	87 e0       	ldi	r24, 0x07	; 7
 2c4:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 2c8:	81 e3       	ldi	r24, 0x31	; 49
 2ca:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 2ce:	81 ec       	ldi	r24, 0xC1	; 193
 2d0:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 2d4:	88 e4       	ldi	r24, 0x48	; 72
 2d6:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 2da:	88 e0       	ldi	r24, 0x08	; 8
 2dc:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 2e0:	8f e0       	ldi	r24, 0x0F	; 15
 2e2:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 2e6:	8c e0       	ldi	r24, 0x0C	; 12
 2e8:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 2ec:	81 e3       	ldi	r24, 0x31	; 49
 2ee:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 2f2:	86 e3       	ldi	r24, 0x36	; 54
 2f4:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 2f8:	8f e0       	ldi	r24, 0x0F	; 15
 2fa:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 2fe:	81 e1       	ldi	r24, 0x11	; 17
 300:	0e 94 f6 02 	call	0x5ec	; 0x5ec <writeCmd>
 304:	2f ef       	ldi	r18, 0xFF	; 255
 306:	8b ed       	ldi	r24, 0xDB	; 219
 308:	95 e0       	ldi	r25, 0x05	; 5
 30a:	21 50       	subi	r18, 0x01	; 1
 30c:	80 40       	sbci	r24, 0x00	; 0
 30e:	90 40       	sbci	r25, 0x00	; 0
 310:	e1 f7       	brne	.-8      	; 0x30a <controller_begin+0x218>
 312:	00 c0       	rjmp	.+0      	; 0x314 <controller_begin+0x222>
 314:	00 00       	nop
 316:	80 e8       	ldi	r24, 0x80	; 128
 318:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 31c:	89 e2       	ldi	r24, 0x29	; 41
 31e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <writeCmd>
 322:	80 e8       	ldi	r24, 0x80	; 128
 324:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 328:	08 95       	ret

0000032a <writeWord>:
 32a:	cf 93       	push	r28
 32c:	c8 2f       	mov	r28, r24
 32e:	89 2f       	mov	r24, r25
 330:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 334:	8c 2f       	mov	r24, r28
 336:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <writeByte>
 33a:	cf 91       	pop	r28
 33c:	08 95       	ret

0000033e <setAddrWindow>:
 33e:	cf 92       	push	r12
 340:	df 92       	push	r13
 342:	ef 92       	push	r14
 344:	ff 92       	push	r15
 346:	0f 93       	push	r16
 348:	1f 93       	push	r17
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	6c 01       	movw	r12, r24
 350:	7b 01       	movw	r14, r22
 352:	8a 01       	movw	r16, r20
 354:	e9 01       	movw	r28, r18
 356:	8a e2       	ldi	r24, 0x2A	; 42
 358:	0e 94 f6 02 	call	0x5ec	; 0x5ec <writeCmd>
 35c:	c6 01       	movw	r24, r12
 35e:	0e 94 95 01 	call	0x32a	; 0x32a <writeWord>
 362:	c8 01       	movw	r24, r16
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	8c 0d       	add	r24, r12
 368:	9d 1d       	adc	r25, r13
 36a:	0e 94 95 01 	call	0x32a	; 0x32a <writeWord>
 36e:	8b e2       	ldi	r24, 0x2B	; 43
 370:	0e 94 f6 02 	call	0x5ec	; 0x5ec <writeCmd>
 374:	c7 01       	movw	r24, r14
 376:	0e 94 95 01 	call	0x32a	; 0x32a <writeWord>
 37a:	ce 01       	movw	r24, r28
 37c:	01 97       	sbiw	r24, 0x01	; 1
 37e:	8e 0d       	add	r24, r14
 380:	9f 1d       	adc	r25, r15
 382:	0e 94 95 01 	call	0x32a	; 0x32a <writeWord>
 386:	8c e2       	ldi	r24, 0x2C	; 44
 388:	0e 94 f6 02 	call	0x5ec	; 0x5ec <writeCmd>
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	1f 91       	pop	r17
 392:	0f 91       	pop	r16
 394:	ff 90       	pop	r15
 396:	ef 90       	pop	r14
 398:	df 90       	pop	r13
 39a:	cf 90       	pop	r12
 39c:	08 95       	ret

0000039e <write565>:
 39e:	cf 92       	push	r12
 3a0:	df 92       	push	r13
 3a2:	ef 92       	push	r14
 3a4:	ff 92       	push	r15
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
 3aa:	ec 01       	movw	r28, r24
 3ac:	6a 01       	movw	r12, r20
 3ae:	7b 01       	movw	r14, r22
 3b0:	45 2b       	or	r20, r21
 3b2:	46 2b       	or	r20, r22
 3b4:	47 2b       	or	r20, r23
 3b6:	49 f0       	breq	.+18     	; 0x3ca <write565+0x2c>
 3b8:	ce 01       	movw	r24, r28
 3ba:	0e 94 95 01 	call	0x32a	; 0x32a <writeWord>
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	c8 1a       	sub	r12, r24
 3c2:	d1 08       	sbc	r13, r1
 3c4:	e1 08       	sbc	r14, r1
 3c6:	f1 08       	sbc	r15, r1
 3c8:	b9 f7       	brne	.-18     	; 0x3b8 <write565+0x1a>
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	ff 90       	pop	r15
 3d0:	ef 90       	pop	r14
 3d2:	df 90       	pop	r13
 3d4:	cf 90       	pop	r12
 3d6:	08 95       	ret

000003d8 <drawPixel>:
 3d8:	ef 92       	push	r14
 3da:	ff 92       	push	r15
 3dc:	0f 93       	push	r16
 3de:	1f 93       	push	r17
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	80 3f       	cpi	r24, 0xF0	; 240
 3e6:	91 05       	cpc	r25, r1
 3e8:	d0 f4       	brcc	.+52     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3ea:	60 34       	cpi	r22, 0x40	; 64
 3ec:	21 e0       	ldi	r18, 0x01	; 1
 3ee:	72 07       	cpc	r23, r18
 3f0:	b0 f4       	brcc	.+44     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3f2:	7a 01       	movw	r14, r20
 3f4:	8b 01       	movw	r16, r22
 3f6:	ec 01       	movw	r28, r24
 3f8:	0e 94 ce 02 	call	0x59c	; 0x59c <spiStartWrite>
 3fc:	2e e1       	ldi	r18, 0x1E	; 30
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	4e e1       	ldi	r20, 0x1E	; 30
 402:	50 e0       	ldi	r21, 0x00	; 0
 404:	b8 01       	movw	r22, r16
 406:	ce 01       	movw	r24, r28
 408:	0e 94 9f 01 	call	0x33e	; 0x33e <setAddrWindow>
 40c:	44 e8       	ldi	r20, 0x84	; 132
 40e:	53 e0       	ldi	r21, 0x03	; 3
 410:	60 e0       	ldi	r22, 0x00	; 0
 412:	70 e0       	ldi	r23, 0x00	; 0
 414:	c7 01       	movw	r24, r14
 416:	0e 94 cf 01 	call	0x39e	; 0x39e <write565>
 41a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <spiEndWrite>
 41e:	df 91       	pop	r29
 420:	cf 91       	pop	r28
 422:	1f 91       	pop	r17
 424:	0f 91       	pop	r16
 426:	ff 90       	pop	r15
 428:	ef 90       	pop	r14
 42a:	08 95       	ret

0000042c <writeBitmap>:


void writeBitmap(uint8_t data[], uint32_t count, uint16_t col)
{
 42c:	5f 92       	push	r5
 42e:	6f 92       	push	r6
 430:	7f 92       	push	r7
 432:	8f 92       	push	r8
 434:	9f 92       	push	r9
 436:	af 92       	push	r10
 438:	bf 92       	push	r11
 43a:	cf 92       	push	r12
 43c:	df 92       	push	r13
 43e:	ef 92       	push	r14
 440:	ff 92       	push	r15
 442:	0f 93       	push	r16
 444:	1f 93       	push	r17
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
	uint8_t bitMask = 128;
	uint32_t i = 0;
	for(;i<count;i++)
 44a:	41 15       	cp	r20, r1
 44c:	51 05       	cpc	r21, r1
 44e:	61 05       	cpc	r22, r1
 450:	71 05       	cpc	r23, r1
 452:	61 f1       	breq	.+88     	; 0x4ac <writeBitmap+0x80>
 454:	89 01       	movw	r16, r18
 456:	4a 01       	movw	r8, r20
 458:	5b 01       	movw	r10, r22
 45a:	c8 2f       	mov	r28, r24
 45c:	d9 2f       	mov	r29, r25
 45e:	c1 2c       	mov	r12, r1
 460:	d1 2c       	mov	r13, r1
 462:	76 01       	movw	r14, r12
 464:	1b c0       	rjmp	.+54     	; 0x49c <writeBitmap+0x70>
	{
		bitMask = 128;
		while (bitMask) 
		{
			if ((data[i] & bitMask))
 466:	88 81       	ld	r24, Y
 468:	85 21       	and	r24, r5
 46a:	21 f0       	breq	.+8      	; 0x474 <writeBitmap+0x48>
			{
				writeWord(col);	 //send col1
 46c:	c8 01       	movw	r24, r16
 46e:	0e 94 95 01 	call	0x32a	; 0x32a <writeWord>
 472:	04 c0       	rjmp	.+8      	; 0x47c <writeBitmap+0x50>
			}
			else
			{
				writeWord(BLACK);	 //send col2
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	0e 94 95 01 	call	0x32a	; 0x32a <writeWord>
			}
			bitMask = (bitMask >> 1);
 47c:	56 94       	lsr	r5
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	68 1a       	sub	r6, r24
 482:	71 08       	sbc	r7, r1
	uint8_t bitMask = 128;
	uint32_t i = 0;
	for(;i<count;i++)
	{
		bitMask = 128;
		while (bitMask) 
 484:	81 f7       	brne	.-32     	; 0x466 <writeBitmap+0x3a>

void writeBitmap(uint8_t data[], uint32_t count, uint16_t col)
{
	uint8_t bitMask = 128;
	uint32_t i = 0;
	for(;i<count;i++)
 486:	8f ef       	ldi	r24, 0xFF	; 255
 488:	c8 1a       	sub	r12, r24
 48a:	d8 0a       	sbc	r13, r24
 48c:	e8 0a       	sbc	r14, r24
 48e:	f8 0a       	sbc	r15, r24
 490:	21 96       	adiw	r28, 0x01	; 1
 492:	8c 14       	cp	r8, r12
 494:	9d 04       	cpc	r9, r13
 496:	ae 04       	cpc	r10, r14
 498:	bf 04       	cpc	r11, r15
 49a:	41 f0       	breq	.+16     	; 0x4ac <writeBitmap+0x80>
	spiEndWrite();
}


void writeBitmap(uint8_t data[], uint32_t count, uint16_t col)
{
 49c:	68 94       	set
 49e:	66 24       	eor	r6, r6
 4a0:	63 f8       	bld	r6, 3
 4a2:	71 2c       	mov	r7, r1
 4a4:	68 94       	set
 4a6:	55 24       	eor	r5, r5
 4a8:	57 f8       	bld	r5, 7
 4aa:	dd cf       	rjmp	.-70     	; 0x466 <writeBitmap+0x3a>
				writeWord(BLACK);	 //send col2
			}
			bitMask = (bitMask >> 1);
		}
	}
}
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	1f 91       	pop	r17
 4b2:	0f 91       	pop	r16
 4b4:	ff 90       	pop	r15
 4b6:	ef 90       	pop	r14
 4b8:	df 90       	pop	r13
 4ba:	cf 90       	pop	r12
 4bc:	bf 90       	pop	r11
 4be:	af 90       	pop	r10
 4c0:	9f 90       	pop	r9
 4c2:	8f 90       	pop	r8
 4c4:	7f 90       	pop	r7
 4c6:	6f 90       	pop	r6
 4c8:	5f 90       	pop	r5
 4ca:	08 95       	ret

000004cc <drawBitmapPlayer>:

void drawBitmapPlayer(uint16_t x, uint16_t y)
{
 4cc:	0f 93       	push	r16
 4ce:	1f 93       	push	r17
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
	if((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT))
 4d4:	80 3f       	cpi	r24, 0xF0	; 240
 4d6:	91 05       	cpc	r25, r1
 4d8:	e0 f4       	brcc	.+56     	; 0x512 <drawBitmapPlayer+0x46>
 4da:	60 34       	cpi	r22, 0x40	; 64
 4dc:	21 e0       	ldi	r18, 0x01	; 1
 4de:	72 07       	cpc	r23, r18
 4e0:	c0 f4       	brcc	.+48     	; 0x512 <drawBitmapPlayer+0x46>
 4e2:	8b 01       	movw	r16, r22
 4e4:	ec 01       	movw	r28, r24
	{
		spiStartWrite();
 4e6:	0e 94 ce 02 	call	0x59c	; 0x59c <spiStartWrite>
		setAddrWindow(x, y, PLAYERSIZE, PLAYERSIZE); // set active region = 30 x 30
 4ea:	2e e1       	ldi	r18, 0x1E	; 30
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	4e e1       	ldi	r20, 0x1E	; 30
 4f0:	50 e0       	ldi	r21, 0x00	; 0
 4f2:	b8 01       	movw	r22, r16
 4f4:	ce 01       	movw	r24, r28
 4f6:	0e 94 9f 01 	call	0x33e	; 0x33e <setAddrWindow>
		writeBitmap(playerBitmap, PLAYERLEN, GREEN); // send color for this pixel
 4fa:	20 ee       	ldi	r18, 0xE0	; 224
 4fc:	37 e0       	ldi	r19, 0x07	; 7
 4fe:	41 e7       	ldi	r20, 0x71	; 113
 500:	50 e0       	ldi	r21, 0x00	; 0
 502:	60 e0       	ldi	r22, 0x00	; 0
 504:	70 e0       	ldi	r23, 0x00	; 0
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	91 e0       	ldi	r25, 0x01	; 1
 50a:	0e 94 16 02 	call	0x42c	; 0x42c <writeBitmap>
		spiEndWrite();
 50e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <spiEndWrite>
	}
}
 512:	df 91       	pop	r29
 514:	cf 91       	pop	r28
 516:	1f 91       	pop	r17
 518:	0f 91       	pop	r16
 51a:	08 95       	ret

0000051c <uart_putchar>:

#include <avr/io.h>
#include <stdio.h>


void uart_putchar(char c, FILE *stream) {
 51c:	cf 93       	push	r28
 51e:	c8 2f       	mov	r28, r24
	if (c == '\n') {
 520:	8a 30       	cpi	r24, 0x0A	; 10
 522:	19 f4       	brne	.+6      	; 0x52a <uart_putchar+0xe>
		uart_putchar('\r', stream);
 524:	8d e0       	ldi	r24, 0x0D	; 13
 526:	0e 94 8e 02 	call	0x51c	; 0x51c <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
 52a:	e0 ec       	ldi	r30, 0xC0	; 192
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	80 81       	ld	r24, Z
 530:	85 ff       	sbrs	r24, 5
 532:	fd cf       	rjmp	.-6      	; 0x52e <uart_putchar+0x12>
	UDR0 = c;
 534:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 538:	cf 91       	pop	r28
 53a:	08 95       	ret

0000053c <uart_getchar>:

char uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
 53c:	e0 ec       	ldi	r30, 0xC0	; 192
 53e:	f0 e0       	ldi	r31, 0x00	; 0
 540:	80 81       	ld	r24, Z
 542:	88 23       	and	r24, r24
 544:	ec f7       	brge	.-6      	; 0x540 <uart_getchar+0x4>
	return UDR0;
 546:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 54a:	08 95       	ret

0000054c <uart_init>:
FILE uart_output = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
FILE uart_input = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);
FILE uart_io = FDEV_SETUP_STREAM(uart_putchar, uart_getchar, _FDEV_SETUP_RW);

void uart_init(void) {
	UBRR0H = UBRRH_VALUE;
 54c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
 550:	87 e6       	ldi	r24, 0x67	; 103
 552:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
 556:	e0 ec       	ldi	r30, 0xC0	; 192
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	80 81       	ld	r24, Z
 55c:	8d 7f       	andi	r24, 0xFD	; 253
 55e:	80 83       	st	Z, r24
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
 560:	86 e0       	ldi	r24, 0x06	; 6
 562:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
 566:	88 e1       	ldi	r24, 0x18	; 24
 568:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

	stdout = &uart_output;
 56c:	e6 ea       	ldi	r30, 0xA6	; 166
 56e:	f1 e0       	ldi	r31, 0x01	; 1
 570:	8f e7       	ldi	r24, 0x7F	; 127
 572:	91 e0       	ldi	r25, 0x01	; 1
 574:	93 83       	std	Z+3, r25	; 0x03
 576:	82 83       	std	Z+2, r24	; 0x02
	stdin  = &uart_input;
 578:	81 e7       	ldi	r24, 0x71	; 113
 57a:	91 e0       	ldi	r25, 0x01	; 1
 57c:	91 83       	std	Z+1, r25	; 0x01
 57e:	80 83       	st	Z, r24
 580:	08 95       	ret

00000582 <Serial_begin>:

}

void Serial_begin(void)
{
	uart_init();
 582:	0e 94 a6 02 	call	0x54c	; 0x54c <uart_init>
 586:	08 95       	ret

00000588 <spiInitMaster>:
int spiReceive(void)
{
	while(!(SPSR & (1<<SPIF)));    // wait until complete
	dataIn = SPDR;					//Save input
	return dataIn;					
}
 588:	84 b1       	in	r24, 0x04	; 4
 58a:	8c 62       	ori	r24, 0x2C	; 44
 58c:	84 b9       	out	0x04, r24	; 4
 58e:	24 98       	cbi	0x04, 4	; 4
 590:	2a 9a       	sbi	0x05, 2	; 5
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	8d bd       	out	0x2d, r24	; 45
 596:	80 e5       	ldi	r24, 0x50	; 80
 598:	8c bd       	out	0x2c, r24	; 44
 59a:	08 95       	ret

0000059c <spiStartWrite>:
 59c:	80 e5       	ldi	r24, 0x50	; 80
 59e:	8c bd       	out	0x2c, r24	; 44
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	8d bd       	out	0x2d, r24	; 45
 5a4:	29 9a       	sbi	0x05, 1	; 5
 5a6:	85 e0       	ldi	r24, 0x05	; 5
 5a8:	8a 95       	dec	r24
 5aa:	f1 f7       	brne	.-4      	; 0x5a8 <spiStartWrite+0xc>
 5ac:	00 00       	nop
 5ae:	2a 98       	cbi	0x05, 2	; 5
 5b0:	08 95       	ret

000005b2 <spiEndWrite>:
 5b2:	2a 9a       	sbi	0x05, 2	; 5
 5b4:	29 98       	cbi	0x05, 1	; 5
 5b6:	08 95       	ret

000005b8 <spiStartWriteTouch>:
 5b8:	81 e5       	ldi	r24, 0x51	; 81
 5ba:	8c bd       	out	0x2c, r24	; 44
 5bc:	1d bc       	out	0x2d, r1	; 45
 5be:	28 98       	cbi	0x05, 0	; 5
 5c0:	08 95       	ret

000005c2 <spiEndWriteTouch>:
 5c2:	28 9a       	sbi	0x05, 0	; 5
 5c4:	08 95       	ret

000005c6 <spiTransmit>:

int spiTransmit(uint8_t dataOut)
{
	SPDR = dataOut;                 // send data
 5c6:	8e bd       	out	0x2e, r24	; 46
	asm volatile("nop");
 5c8:	00 00       	nop
	while(!(SPSR & (1<<SPIF)));
 5ca:	0d b4       	in	r0, 0x2d	; 45
 5cc:	07 fe       	sbrs	r0, 7
 5ce:	fd cf       	rjmp	.-6      	; 0x5ca <spiTransmit+0x4>
	return SPDR;
 5d0:	8e b5       	in	r24, 0x2e	; 46
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	08 95       	ret

000005d6 <writeByte>:
	SPCR = (1<<SPE) | (1<<MSTR);
}

void writeByte (uint8_t b)
{
	controlport |=(1<<dc);		//set dc high for data
 5d6:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5d8:	95 e0       	ldi	r25, 0x05	; 5
 5da:	9a 95       	dec	r25
 5dc:	f1 f7       	brne	.-4      	; 0x5da <writeByte+0x4>
 5de:	00 00       	nop
	_delay_us(1);				//delay
	controlport &=~(1<<cs_disp);		//set cs low for operation
 5e0:	2a 98       	cbi	0x05, 2	; 5
	spiTransmit(b);
 5e2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <spiTransmit>
	controlport |= (1<<cs_disp);
 5e6:	2a 9a       	sbi	0x05, 2	; 5
	controlport &=~ (1<<dc);	//set dc low
 5e8:	29 98       	cbi	0x05, 1	; 5
 5ea:	08 95       	ret

000005ec <writeCmd>:
}

void writeCmd (uint8_t cmd)
{
	controlport &=~((1<<dc)|(1<<cs_disp));	//dc and cs both low to send command
 5ec:	95 b1       	in	r25, 0x05	; 5
 5ee:	99 7f       	andi	r25, 0xF9	; 249
 5f0:	95 b9       	out	0x05, r25	; 5
 5f2:	9a e1       	ldi	r25, 0x1A	; 26
 5f4:	9a 95       	dec	r25
 5f6:	f1 f7       	brne	.-4      	; 0x5f4 <writeCmd+0x8>
 5f8:	00 c0       	rjmp	.+0      	; 0x5fa <writeCmd+0xe>
	_delay_us(5);						//little delay
	spiTransmit(cmd);
 5fa:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <spiTransmit>
	controlport |=(1<<cs_disp);				//pull high cs
 5fe:	2a 9a       	sbi	0x05, 2	; 5
 600:	08 95       	ret

00000602 <readReg8>:
{
}

uint8_t bufferSize(void) {
	return readReg8(STMPE_FIFO_SIZE);
}
 602:	cf 93       	push	r28
 604:	c8 2f       	mov	r28, r24
 606:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <spiStartWriteTouch>
 60a:	8c 2f       	mov	r24, r28
 60c:	80 68       	ori	r24, 0x80	; 128
 60e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <spiTransmit>
 612:	80 e0       	ldi	r24, 0x00	; 0
 614:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <spiTransmit>
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <spiTransmit>
 61e:	c8 2f       	mov	r28, r24
 620:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <spiEndWriteTouch>
 624:	8c 2f       	mov	r24, r28
 626:	cf 91       	pop	r28
 628:	08 95       	ret

0000062a <writeReg8>:
 62a:	cf 93       	push	r28
 62c:	df 93       	push	r29
 62e:	d8 2f       	mov	r29, r24
 630:	c6 2f       	mov	r28, r22
 632:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <spiStartWriteTouch>
 636:	8d 2f       	mov	r24, r29
 638:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <spiTransmit>
 63c:	8c 2f       	mov	r24, r28
 63e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <spiTransmit>
 642:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <spiEndWriteTouch>
 646:	df 91       	pop	r29
 648:	cf 91       	pop	r28
 64a:	08 95       	ret

0000064c <touch_begin>:
 64c:	cf 93       	push	r28
 64e:	20 9a       	sbi	0x04, 0	; 4
 650:	85 b1       	in	r24, 0x05	; 5
 652:	85 b9       	out	0x05, r24	; 5
 654:	62 e0       	ldi	r22, 0x02	; 2
 656:	83 e0       	ldi	r24, 0x03	; 3
 658:	0e 94 15 03 	call	0x62a	; 0x62a <writeReg8>
 65c:	8f e3       	ldi	r24, 0x3F	; 63
 65e:	9c e9       	ldi	r25, 0x9C	; 156
 660:	01 97       	sbiw	r24, 0x01	; 1
 662:	f1 f7       	brne	.-4      	; 0x660 <touch_begin+0x14>
 664:	00 c0       	rjmp	.+0      	; 0x666 <touch_begin+0x1a>
 666:	00 00       	nop
 668:	c0 e0       	ldi	r28, 0x00	; 0
 66a:	8c 2f       	mov	r24, r28
 66c:	0e 94 01 03 	call	0x602	; 0x602 <readReg8>
 670:	cf 5f       	subi	r28, 0xFF	; 255
 672:	c1 34       	cpi	r28, 0x41	; 65
 674:	d1 f7       	brne	.-12     	; 0x66a <touch_begin+0x1e>
 676:	60 e0       	ldi	r22, 0x00	; 0
 678:	84 e0       	ldi	r24, 0x04	; 4
 67a:	0e 94 15 03 	call	0x62a	; 0x62a <writeReg8>
 67e:	61 e0       	ldi	r22, 0x01	; 1
 680:	80 e4       	ldi	r24, 0x40	; 64
 682:	0e 94 15 03 	call	0x62a	; 0x62a <writeReg8>
 686:	61 e0       	ldi	r22, 0x01	; 1
 688:	8a e0       	ldi	r24, 0x0A	; 10
 68a:	0e 94 15 03 	call	0x62a	; 0x62a <writeReg8>
 68e:	60 e6       	ldi	r22, 0x60	; 96
 690:	80 e2       	ldi	r24, 0x20	; 32
 692:	0e 94 15 03 	call	0x62a	; 0x62a <writeReg8>
 696:	62 e0       	ldi	r22, 0x02	; 2
 698:	81 e2       	ldi	r24, 0x21	; 33
 69a:	0e 94 15 03 	call	0x62a	; 0x62a <writeReg8>
 69e:	64 ea       	ldi	r22, 0xA4	; 164
 6a0:	81 e4       	ldi	r24, 0x41	; 65
 6a2:	0e 94 15 03 	call	0x62a	; 0x62a <writeReg8>
 6a6:	66 e0       	ldi	r22, 0x06	; 6
 6a8:	86 e5       	ldi	r24, 0x56	; 86
 6aa:	0e 94 15 03 	call	0x62a	; 0x62a <writeReg8>
 6ae:	61 e0       	ldi	r22, 0x01	; 1
 6b0:	8a e4       	ldi	r24, 0x4A	; 74
 6b2:	0e 94 15 03 	call	0x62a	; 0x62a <writeReg8>
 6b6:	61 e0       	ldi	r22, 0x01	; 1
 6b8:	8b e4       	ldi	r24, 0x4B	; 75
 6ba:	0e 94 15 03 	call	0x62a	; 0x62a <writeReg8>
 6be:	60 e0       	ldi	r22, 0x00	; 0
 6c0:	8b e4       	ldi	r24, 0x4B	; 75
 6c2:	0e 94 15 03 	call	0x62a	; 0x62a <writeReg8>
 6c6:	61 e0       	ldi	r22, 0x01	; 1
 6c8:	88 e5       	ldi	r24, 0x58	; 88
 6ca:	0e 94 15 03 	call	0x62a	; 0x62a <writeReg8>
 6ce:	6f ef       	ldi	r22, 0xFF	; 255
 6d0:	8b e0       	ldi	r24, 0x0B	; 11
 6d2:	0e 94 15 03 	call	0x62a	; 0x62a <writeReg8>
 6d6:	65 e0       	ldi	r22, 0x05	; 5
 6d8:	89 e0       	ldi	r24, 0x09	; 9
 6da:	0e 94 15 03 	call	0x62a	; 0x62a <writeReg8>
 6de:	81 e9       	ldi	r24, 0x91	; 145
 6e0:	91 e0       	ldi	r25, 0x01	; 1
 6e2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <puts>
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	cf 91       	pop	r28
 6ea:	08 95       	ret

000006ec <touched>:
 6ec:	80 e4       	ldi	r24, 0x40	; 64
 6ee:	0e 94 01 03 	call	0x602	; 0x602 <readReg8>
 6f2:	80 78       	andi	r24, 0x80	; 128
 6f4:	08 95       	ret

000006f6 <bufferEmpty>:

uint8_t bufferEmpty() 
{
	return (readReg8(STMPE_FIFO_STA) & STMPE_FIFO_STA_EMPTY);
 6f6:	8b e4       	ldi	r24, 0x4B	; 75
 6f8:	0e 94 01 03 	call	0x602	; 0x602 <readReg8>
}
 6fc:	80 72       	andi	r24, 0x20	; 32
 6fe:	08 95       	ret

00000700 <readData>:

void readData(uint16_t *x, uint16_t *y, uint8_t *z) 
{
 700:	8f 92       	push	r8
 702:	9f 92       	push	r9
 704:	af 92       	push	r10
 706:	bf 92       	push	r11
 708:	cf 92       	push	r12
 70a:	df 92       	push	r13
 70c:	ef 92       	push	r14
 70e:	ff 92       	push	r15
 710:	0f 93       	push	r16
 712:	1f 93       	push	r17
 714:	cf 93       	push	r28
 716:	df 93       	push	r29
 718:	00 d0       	rcall	.+0      	; 0x71a <readData+0x1a>
 71a:	00 d0       	rcall	.+0      	; 0x71c <readData+0x1c>
 71c:	cd b7       	in	r28, 0x3d	; 61
 71e:	de b7       	in	r29, 0x3e	; 62
 720:	5c 01       	movw	r10, r24
 722:	6b 01       	movw	r12, r22
 724:	7a 01       	movw	r14, r20
 726:	8e 01       	movw	r16, r28
 728:	0f 5f       	subi	r16, 0xFF	; 255
 72a:	1f 4f       	sbci	r17, 0xFF	; 255
 72c:	4e 01       	movw	r8, r28
 72e:	85 e0       	ldi	r24, 0x05	; 5
 730:	88 0e       	add	r8, r24
 732:	91 1c       	adc	r9, r1
	uint8_t data[4];

	for (uint8_t i = 0; i < 4; i++) {
		data[i] = readReg8(0xD7); // _spi->transfer(0x00);
 734:	87 ed       	ldi	r24, 0xD7	; 215
 736:	0e 94 01 03 	call	0x602	; 0x602 <readReg8>
 73a:	f8 01       	movw	r30, r16
 73c:	81 93       	st	Z+, r24
 73e:	8f 01       	movw	r16, r30

void readData(uint16_t *x, uint16_t *y, uint8_t *z) 
{
	uint8_t data[4];

	for (uint8_t i = 0; i < 4; i++) {
 740:	e8 15       	cp	r30, r8
 742:	f9 05       	cpc	r31, r9
 744:	b9 f7       	brne	.-18     	; 0x734 <readData+0x34>
		data[i] = readReg8(0xD7); // _spi->transfer(0x00);
	}
	*x = data[0];
	*x <<= 4;
	*x |= (data[1] >> 4);
 746:	8a 81       	ldd	r24, Y+2	; 0x02
 748:	29 81       	ldd	r18, Y+1	; 0x01
 74a:	f0 e1       	ldi	r31, 0x10	; 16
 74c:	2f 9f       	mul	r18, r31
 74e:	90 01       	movw	r18, r0
 750:	11 24       	eor	r1, r1
 752:	98 2f       	mov	r25, r24
 754:	92 95       	swap	r25
 756:	9f 70       	andi	r25, 0x0F	; 15
 758:	29 2b       	or	r18, r25
 75a:	f5 01       	movw	r30, r10
 75c:	31 83       	std	Z+1, r19	; 0x01
 75e:	20 83       	st	Z, r18
	*y = data[1] & 0x0F;
	*y <<= 8;
	*y |= data[2];
 760:	8f 70       	andi	r24, 0x0F	; 15
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	98 2f       	mov	r25, r24
 766:	88 27       	eor	r24, r24
 768:	2b 81       	ldd	r18, Y+3	; 0x03
 76a:	82 2b       	or	r24, r18
 76c:	f6 01       	movw	r30, r12
 76e:	91 83       	std	Z+1, r25	; 0x01
 770:	80 83       	st	Z, r24
	*z = data[3];
 772:	8c 81       	ldd	r24, Y+4	; 0x04
 774:	f7 01       	movw	r30, r14
 776:	80 83       	st	Z, r24

	writeReg8(STMPE_INT_STA, 0xFF); // reset all ints
 778:	6f ef       	ldi	r22, 0xFF	; 255
 77a:	8b e0       	ldi	r24, 0x0B	; 11
 77c:	0e 94 15 03 	call	0x62a	; 0x62a <writeReg8>
 780:	0f 90       	pop	r0
 782:	0f 90       	pop	r0
 784:	0f 90       	pop	r0
 786:	0f 90       	pop	r0
 788:	df 91       	pop	r29
 78a:	cf 91       	pop	r28
 78c:	1f 91       	pop	r17
 78e:	0f 91       	pop	r16
 790:	ff 90       	pop	r15
 792:	ef 90       	pop	r14
 794:	df 90       	pop	r13
 796:	cf 90       	pop	r12
 798:	bf 90       	pop	r11
 79a:	af 90       	pop	r10
 79c:	9f 90       	pop	r9
 79e:	8f 90       	pop	r8
 7a0:	08 95       	ret

000007a2 <getPoint>:
	return (readReg8(STMPE_TSC_CTRL) & 0x80);
}

//TODO: implement z-value 
void getPoint(uint16_t *p_X, uint16_t *p_Y) 
{
 7a2:	ef 92       	push	r14
 7a4:	ff 92       	push	r15
 7a6:	0f 93       	push	r16
 7a8:	1f 93       	push	r17
 7aa:	cf 93       	push	r28
 7ac:	df 93       	push	r29
 7ae:	00 d0       	rcall	.+0      	; 0x7b0 <getPoint+0xe>
 7b0:	00 d0       	rcall	.+0      	; 0x7b2 <getPoint+0x10>
 7b2:	1f 92       	push	r1
 7b4:	cd b7       	in	r28, 0x3d	; 61
 7b6:	de b7       	in	r29, 0x3e	; 62
 7b8:	7c 01       	movw	r14, r24
 7ba:	8b 01       	movw	r16, r22
	uint16_t x, y;
	uint8_t z;
	while (!bufferEmpty()) {
 7bc:	0a c0       	rjmp	.+20     	; 0x7d2 <getPoint+0x30>
		readData(&x, &y, &z);
 7be:	ae 01       	movw	r20, r28
 7c0:	4b 5f       	subi	r20, 0xFB	; 251
 7c2:	5f 4f       	sbci	r21, 0xFF	; 255
 7c4:	be 01       	movw	r22, r28
 7c6:	6d 5f       	subi	r22, 0xFD	; 253
 7c8:	7f 4f       	sbci	r23, 0xFF	; 255
 7ca:	ce 01       	movw	r24, r28
 7cc:	01 96       	adiw	r24, 0x01	; 1
 7ce:	0e 94 80 03 	call	0x700	; 0x700 <readData>
//TODO: implement z-value 
void getPoint(uint16_t *p_X, uint16_t *p_Y) 
{
	uint16_t x, y;
	uint8_t z;
	while (!bufferEmpty()) {
 7d2:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <bufferEmpty>
 7d6:	88 23       	and	r24, r24
 7d8:	91 f3       	breq	.-28     	; 0x7be <getPoint+0x1c>
		readData(&x, &y, &z);
	}
	if (bufferEmpty())
 7da:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <bufferEmpty>
 7de:	88 23       	and	r24, r24
 7e0:	21 f0       	breq	.+8      	; 0x7ea <getPoint+0x48>
	{
		writeReg8(STMPE_INT_STA, 0xFF); // reset
 7e2:	6f ef       	ldi	r22, 0xFF	; 255
 7e4:	8b e0       	ldi	r24, 0x0B	; 11
 7e6:	0e 94 15 03 	call	0x62a	; 0x62a <writeReg8>
	}


	*p_X = x / 20;
 7ea:	29 81       	ldd	r18, Y+1	; 0x01
 7ec:	3a 81       	ldd	r19, Y+2	; 0x02
 7ee:	ad ec       	ldi	r26, 0xCD	; 205
 7f0:	bc ec       	ldi	r27, 0xCC	; 204
 7f2:	0e 94 c5 04 	call	0x98a	; 0x98a <__umulhisi3>
 7f6:	92 95       	swap	r25
 7f8:	82 95       	swap	r24
 7fa:	8f 70       	andi	r24, 0x0F	; 15
 7fc:	89 27       	eor	r24, r25
 7fe:	9f 70       	andi	r25, 0x0F	; 15
 800:	89 27       	eor	r24, r25
 802:	f7 01       	movw	r30, r14
 804:	91 83       	std	Z+1, r25	; 0x01
 806:	80 83       	st	Z, r24
	*p_Y = y / 15;
 808:	2b 81       	ldd	r18, Y+3	; 0x03
 80a:	3c 81       	ldd	r19, Y+4	; 0x04
 80c:	a9 e8       	ldi	r26, 0x89	; 137
 80e:	b8 e8       	ldi	r27, 0x88	; 136
 810:	0e 94 c5 04 	call	0x98a	; 0x98a <__umulhisi3>
 814:	96 95       	lsr	r25
 816:	87 95       	ror	r24
 818:	96 95       	lsr	r25
 81a:	87 95       	ror	r24
 81c:	96 95       	lsr	r25
 81e:	87 95       	ror	r24
 820:	f8 01       	movw	r30, r16
 822:	91 83       	std	Z+1, r25	; 0x01
 824:	80 83       	st	Z, r24
}
 826:	0f 90       	pop	r0
 828:	0f 90       	pop	r0
 82a:	0f 90       	pop	r0
 82c:	0f 90       	pop	r0
 82e:	0f 90       	pop	r0
 830:	df 91       	pop	r29
 832:	cf 91       	pop	r28
 834:	1f 91       	pop	r17
 836:	0f 91       	pop	r16
 838:	ff 90       	pop	r15
 83a:	ef 90       	pop	r14
 83c:	08 95       	ret

0000083e <_ZN4GameC1Ev>:
#include "game.h"

Game::Game() {
 83e:	cf 93       	push	r28
 840:	df 93       	push	r29
 842:	ec 01       	movw	r28, r24
 844:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_ZN6PlayerC1Ev>
 848:	80 ef       	ldi	r24, 0xF0	; 240
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	9d 83       	std	Y+5, r25	; 0x05
 84e:	8c 83       	std	Y+4, r24	; 0x04
 850:	80 e4       	ldi	r24, 0x40	; 64
 852:	91 e0       	ldi	r25, 0x01	; 1
 854:	9f 83       	std	Y+7, r25	; 0x07
 856:	8e 83       	std	Y+6, r24	; 0x06
}
 858:	df 91       	pop	r29
 85a:	cf 91       	pop	r28
 85c:	08 95       	ret

0000085e <_ZN4Game9startGameEv>:

void Game::startGame()
{
 85e:	0f 93       	push	r16
 860:	1f 93       	push	r17
 862:	cf 93       	push	r28
 864:	df 93       	push	r29
 866:	00 d0       	rcall	.+0      	; 0x868 <_ZN4Game9startGameEv+0xa>
 868:	00 d0       	rcall	.+0      	; 0x86a <_ZN4Game9startGameEv+0xc>
 86a:	cd b7       	in	r28, 0x3d	; 61
 86c:	de b7       	in	r29, 0x3e	; 62
 86e:	8c 01       	movw	r16, r24
	this->player = Player(this->xBounds / 2, this->yBounds - 50);
 870:	fc 01       	movw	r30, r24
 872:	46 81       	ldd	r20, Z+6	; 0x06
 874:	57 81       	ldd	r21, Z+7	; 0x07
 876:	42 53       	subi	r20, 0x32	; 50
 878:	51 09       	sbc	r21, r1
 87a:	64 81       	ldd	r22, Z+4	; 0x04
 87c:	75 81       	ldd	r23, Z+5	; 0x05
 87e:	76 95       	lsr	r23
 880:	67 95       	ror	r22
 882:	ce 01       	movw	r24, r28
 884:	01 96       	adiw	r24, 0x01	; 1
 886:	0e 94 5e 04 	call	0x8bc	; 0x8bc <_ZN6PlayerC1Ejj>
 88a:	89 81       	ldd	r24, Y+1	; 0x01
 88c:	9a 81       	ldd	r25, Y+2	; 0x02
 88e:	ab 81       	ldd	r26, Y+3	; 0x03
 890:	bc 81       	ldd	r27, Y+4	; 0x04
 892:	f8 01       	movw	r30, r16
 894:	80 83       	st	Z, r24
 896:	91 83       	std	Z+1, r25	; 0x01
 898:	a2 83       	std	Z+2, r26	; 0x02
 89a:	b3 83       	std	Z+3, r27	; 0x03
}
 89c:	0f 90       	pop	r0
 89e:	0f 90       	pop	r0
 8a0:	0f 90       	pop	r0
 8a2:	0f 90       	pop	r0
 8a4:	df 91       	pop	r29
 8a6:	cf 91       	pop	r28
 8a8:	1f 91       	pop	r17
 8aa:	0f 91       	pop	r16
 8ac:	08 95       	ret

000008ae <_ZN4Game12setPlayerPosEh>:

void Game::setPlayerPos(uint8_t x) {
	this->player.movePlayer(x);
 8ae:	70 e0       	ldi	r23, 0x00	; 0
 8b0:	0e 94 65 04 	call	0x8ca	; 0x8ca <_ZN6Player10movePlayerEj>
 8b4:	08 95       	ret

000008b6 <_ZN4Game6renderEv>:
}

void Game::render() {
	this->player.renderPlayer();
 8b6:	0e 94 69 04 	call	0x8d2	; 0x8d2 <_ZN6Player12renderPlayerEv>
 8ba:	08 95       	ret

000008bc <_ZN6PlayerC1Ejj>:
#endif
#include "player.h"
#include <stdint.h>

Player::Player(uint16_t xPos, uint16_t yPos) {
	this->pxX = xPos;
 8bc:	fc 01       	movw	r30, r24
 8be:	71 83       	std	Z+1, r23	; 0x01
 8c0:	60 83       	st	Z, r22
	this->pxY = yPos;
 8c2:	53 83       	std	Z+3, r21	; 0x03
 8c4:	42 83       	std	Z+2, r20	; 0x02
 8c6:	08 95       	ret

000008c8 <_ZN6PlayerC1Ev>:
}

Player::Player() {
 8c8:	08 95       	ret

000008ca <_ZN6Player10movePlayerEj>:
}

void Player::movePlayer(uint16_t newXPos) {
	this->pxX = newXPos;
 8ca:	fc 01       	movw	r30, r24
 8cc:	71 83       	std	Z+1, r23	; 0x01
 8ce:	60 83       	st	Z, r22
 8d0:	08 95       	ret

000008d2 <_ZN6Player12renderPlayerEv>:
}

void Player::renderPlayer() {
	drawBitmapPlayer(this->pxX, this->pxY);
 8d2:	fc 01       	movw	r30, r24
 8d4:	62 81       	ldd	r22, Z+2	; 0x02
 8d6:	73 81       	ldd	r23, Z+3	; 0x03
 8d8:	80 81       	ld	r24, Z
 8da:	91 81       	ldd	r25, Z+1	; 0x01
 8dc:	0e 94 66 02 	call	0x4cc	; 0x4cc <drawBitmapPlayer>
 8e0:	08 95       	ret

000008e2 <main>:


uint16_t pxX = ILI9341_TFTWIDTH / 2;
uint16_t pxY = ILI9341_TFTHEIGHT - 50;
int main(void)
{
 8e2:	cf 93       	push	r28
 8e4:	df 93       	push	r29
 8e6:	cd b7       	in	r28, 0x3d	; 61
 8e8:	de b7       	in	r29, 0x3e	; 62
 8ea:	28 97       	sbiw	r28, 0x08	; 8
 8ec:	0f b6       	in	r0, 0x3f	; 63
 8ee:	f8 94       	cli
 8f0:	de bf       	out	0x3e, r29	; 62
 8f2:	0f be       	out	0x3f, r0	; 63
 8f4:	cd bf       	out	0x3d, r28	; 61
	Serial_begin();
 8f6:	0e 94 c1 02 	call	0x582	; 0x582 <Serial_begin>
	controller_begin();
 8fa:	0e 94 79 00 	call	0xf2	; 0xf2 <controller_begin>
	if (!touch_begin())
 8fe:	0e 94 26 03 	call	0x64c	; 0x64c <touch_begin>
 902:	81 11       	cpse	r24, r1
 904:	04 c0       	rjmp	.+8      	; 0x90e <__stack+0xf>
	{
		printf("No Touch!\n");
 906:	8b e9       	ldi	r24, 0x9B	; 155
 908:	91 e0       	ldi	r25, 0x01	; 1
 90a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <puts>
	}

	Game game = Game();
 90e:	ce 01       	movw	r24, r28
 910:	01 96       	adiw	r24, 0x01	; 1
 912:	0e 94 1f 04 	call	0x83e	; 0x83e <_ZN4GameC1Ev>
	game.startGame();
 916:	ce 01       	movw	r24, r28
 918:	01 96       	adiw	r24, 0x01	; 1
 91a:	0e 94 2f 04 	call	0x85e	; 0x85e <_ZN4Game9startGameEv>

	while (1)
	{
		if (bufferEmpty()) {
 91e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <bufferEmpty>
 922:	88 23       	and	r24, r24
 924:	49 f0       	breq	.+18     	; 0x938 <__stack+0x39>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 926:	2f ef       	ldi	r18, 0xFF	; 255
 928:	80 e7       	ldi	r24, 0x70	; 112
 92a:	92 e0       	ldi	r25, 0x02	; 2
 92c:	21 50       	subi	r18, 0x01	; 1
 92e:	80 40       	sbci	r24, 0x00	; 0
 930:	90 40       	sbci	r25, 0x00	; 0
 932:	e1 f7       	brne	.-8      	; 0x92c <__stack+0x2d>
 934:	00 c0       	rjmp	.+0      	; 0x936 <__stack+0x37>
 936:	00 00       	nop
			_delay_ms(50);
		}
		if (!touched()) {
 938:	0e 94 76 03 	call	0x6ec	; 0x6ec <touched>
 93c:	81 11       	cpse	r24, r1
 93e:	0a c0       	rjmp	.+20     	; 0x954 <__stack+0x55>
 940:	2f ef       	ldi	r18, 0xFF	; 255
 942:	80 e7       	ldi	r24, 0x70	; 112
 944:	92 e0       	ldi	r25, 0x02	; 2
 946:	21 50       	subi	r18, 0x01	; 1
 948:	80 40       	sbci	r24, 0x00	; 0
 94a:	90 40       	sbci	r25, 0x00	; 0
 94c:	e1 f7       	brne	.-8      	; 0x946 <__stack+0x47>
 94e:	00 c0       	rjmp	.+0      	; 0x950 <__stack+0x51>
 950:	00 00       	nop
 952:	16 c0       	rjmp	.+44     	; 0x980 <__stack+0x81>
			_delay_ms(50);
		} 
		else
		{
			drawPixel(pxX, ILI9341_TFTHEIGHT - 50, BLACK);
 954:	40 e0       	ldi	r20, 0x00	; 0
 956:	50 e0       	ldi	r21, 0x00	; 0
 958:	6e e0       	ldi	r22, 0x0E	; 14
 95a:	71 e0       	ldi	r23, 0x01	; 1
 95c:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <pxX>
 960:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <pxX+0x1>
 964:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <drawPixel>
			getPoint(&pxX, &pxY);
 968:	6d e8       	ldi	r22, 0x8D	; 141
 96a:	71 e0       	ldi	r23, 0x01	; 1
 96c:	8f e8       	ldi	r24, 0x8F	; 143
 96e:	91 e0       	ldi	r25, 0x01	; 1
 970:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <getPoint>
			game.setPlayerPos(pxX);
 974:	60 91 8f 01 	lds	r22, 0x018F	; 0x80018f <pxX>
 978:	ce 01       	movw	r24, r28
 97a:	01 96       	adiw	r24, 0x01	; 1
 97c:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN4Game12setPlayerPosEh>
		}
		game.render();
 980:	ce 01       	movw	r24, r28
 982:	01 96       	adiw	r24, 0x01	; 1
 984:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <_ZN4Game6renderEv>
	}

	Game game = Game();
	game.startGame();

	while (1)
 988:	ca cf       	rjmp	.-108    	; 0x91e <__stack+0x1f>

0000098a <__umulhisi3>:
 98a:	a2 9f       	mul	r26, r18
 98c:	b0 01       	movw	r22, r0
 98e:	b3 9f       	mul	r27, r19
 990:	c0 01       	movw	r24, r0
 992:	a3 9f       	mul	r26, r19
 994:	70 0d       	add	r23, r0
 996:	81 1d       	adc	r24, r1
 998:	11 24       	eor	r1, r1
 99a:	91 1d       	adc	r25, r1
 99c:	b2 9f       	mul	r27, r18
 99e:	70 0d       	add	r23, r0
 9a0:	81 1d       	adc	r24, r1
 9a2:	11 24       	eor	r1, r1
 9a4:	91 1d       	adc	r25, r1
 9a6:	08 95       	ret

000009a8 <puts>:
 9a8:	0f 93       	push	r16
 9aa:	1f 93       	push	r17
 9ac:	cf 93       	push	r28
 9ae:	df 93       	push	r29
 9b0:	e0 91 a8 01 	lds	r30, 0x01A8	; 0x8001a8 <__data_end+0x2>
 9b4:	f0 91 a9 01 	lds	r31, 0x01A9	; 0x8001a9 <__data_end+0x3>
 9b8:	23 81       	ldd	r18, Z+3	; 0x03
 9ba:	21 ff       	sbrs	r18, 1
 9bc:	1b c0       	rjmp	.+54     	; 0x9f4 <puts+0x4c>
 9be:	8c 01       	movw	r16, r24
 9c0:	d0 e0       	ldi	r29, 0x00	; 0
 9c2:	c0 e0       	ldi	r28, 0x00	; 0
 9c4:	f8 01       	movw	r30, r16
 9c6:	81 91       	ld	r24, Z+
 9c8:	8f 01       	movw	r16, r30
 9ca:	60 91 a8 01 	lds	r22, 0x01A8	; 0x8001a8 <__data_end+0x2>
 9ce:	70 91 a9 01 	lds	r23, 0x01A9	; 0x8001a9 <__data_end+0x3>
 9d2:	db 01       	movw	r26, r22
 9d4:	18 96       	adiw	r26, 0x08	; 8
 9d6:	ed 91       	ld	r30, X+
 9d8:	fc 91       	ld	r31, X
 9da:	19 97       	sbiw	r26, 0x09	; 9
 9dc:	88 23       	and	r24, r24
 9de:	31 f0       	breq	.+12     	; 0x9ec <puts+0x44>
 9e0:	09 95       	icall
 9e2:	89 2b       	or	r24, r25
 9e4:	79 f3       	breq	.-34     	; 0x9c4 <puts+0x1c>
 9e6:	df ef       	ldi	r29, 0xFF	; 255
 9e8:	cf ef       	ldi	r28, 0xFF	; 255
 9ea:	ec cf       	rjmp	.-40     	; 0x9c4 <puts+0x1c>
 9ec:	8a e0       	ldi	r24, 0x0A	; 10
 9ee:	09 95       	icall
 9f0:	89 2b       	or	r24, r25
 9f2:	19 f0       	breq	.+6      	; 0x9fa <puts+0x52>
 9f4:	8f ef       	ldi	r24, 0xFF	; 255
 9f6:	9f ef       	ldi	r25, 0xFF	; 255
 9f8:	02 c0       	rjmp	.+4      	; 0x9fe <puts+0x56>
 9fa:	8d 2f       	mov	r24, r29
 9fc:	9c 2f       	mov	r25, r28
 9fe:	df 91       	pop	r29
 a00:	cf 91       	pop	r28
 a02:	1f 91       	pop	r17
 a04:	0f 91       	pop	r16
 a06:	08 95       	ret

00000a08 <_exit>:
 a08:	f8 94       	cli

00000a0a <__stop_program>:
 a0a:	ff cf       	rjmp	.-2      	; 0xa0a <__stop_program>
